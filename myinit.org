#+TITLE:Emacs Config README

This file initially served as my init file, tangled into init.el using org-babel. Now it serves to document my distributed init files.



* Future changes
*** TODO Dashboard
*** TODO Look into [[https://github.com/bbatsov/projectile][Projectile]] for project management
***** TODO Use git to manage projects
***** TODO change startup page to show projects
*** TODO Alerts
*** TODO configure Python/ipython dev environment
*** Org upgrades
***** TODO [#A] Long-term tracking of goals and projects
***** TODO [#B] Agenda views
      - appearance
      - search options
***** TODO [#B] managing bookmarks/links
***** TODO change to use-package in the org-mode section
*** DONE Smartparens
*** DONE different fonts
*** DONE better modeline


* Example init files
[[https://github.com/zamansky/using-emacs/blob/master/myinit.org][the guy who made the Using Emacs series, Zamansky]]
[[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]
[[http://doc.norang.ca/org-mode.html][Bernt Hansen's config]]
[[https://github.com/zzamboni/dot-emacs/blob/master/init.org][ZZamboni, who makes org-mode look nice]]


* init-custom.el [[file:~/.emacs.d/inits/init-custom.el][file]]
  The storage spot for the custom-set-variable and custom-set-face declarations, as set in custom-file.


* init-global.el [[file:~/.emacs.d/inits/init-global.el][file]]
  - Sets font information
  - Sends backup files to their own directory ~/.emacs.d/backups
  - Sets several default variables (commented in code)
  - Defines a function for toggling narrowing


* init-gui.el
  - Removes all "helper items" from the screen
  - loads Gruvbox Dark theme


* init-org.el
  - Creates org-mode hooks for variable-pitch-mode, some specific key bindings, and org-bullets
  - Defines custom agendas
  - Defines what languages are available in Org source blocks using Org-Babel
    - Python
    - Shell
    - IPython (dependent on ob-ipython, which I hope to soon change to emacs-jupyter)
    - PlantUML
*** Workflow with 

* init-org-clocking.el
  Implementation of clocking tasks.
  - Sets up org-id for all headings

* Packages
  [[https://github.com/jwiegley/use-package][Use-package]] bootstrapped in init.el
*** init-acewindow.el
    Sets up [[https://github.com/abo-abo/ace-window][ace-window]] for switching between visible windows.
*** init-counsel.el
    Sets up Ivy, Counsel, and Swiper from https://github.com/abo-abo/swiper

*** [[https://github.com/justbur/emacs-which-key][Which-key]]
 #+BEGIN_SRC emacs-lisp
 (use-package which-key
   :ensure t
   :config
   (which-key-mode))
 #+END_SRC
*** [[https://github.com/larstvei/Try][Try]]
    Try packages without fully installing
 #+BEGIN_SRC emacs-lisp
   (use-package try
     :ensure t)
 #+END_SRC
*** [[https://github.com/victorhge/iedit][iedit]]
    Used for editing multiple regions simultaneously
 #+BEGIN_SRC emacs-lisp
 (use-package iedit
   :ensure t)
 #+END_SRC

*** [[https://github.com/politza/pdf-tools][PDF-tools]]
[[https://babbagefiles.blogspot.com/2017/11/more-pdf-tools-tricks.html][Some PDF-Tools tips and tricks!]]
 #+BEGIN_SRC emacs-lisp
   (use-package pdf-tools
       :ensure t
       :config
       (pdf-tools-install))
   (use-package org-pdfview
       :ensure t)

   (setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" )) ; set the amber profile as default (see below)

   (defun fr/pdf-no-filter ()
     "View pdf without colour filter."
     (interactive)
     (pdf-view-midnight-minor-mode -1)
     )

   (defun fr/pdf-midnite-amber ()
     "Set pdf-view-midnight-colors to amber on dark slate blue."
     (interactive)
     (setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" )) ; amber
     ;;  (setq pdf-annot-default-markup-annotation-properties "#ff0000")
     ;;  (setq pdf-annot-default-text-annotation-properties "#ff0000")
     (pdf-view-midnight-minor-mode)
     )

   ;; midnite mode hook
    (add-hook 'pdf-view-mode-hook (lambda ()
				    (pdf-view-midnight-minor-mode))) ; automatically turns on midnight-mode for pdfs

     ;;(require 'pdf-tools)
     ;;(require 'org-pdfview)
 #+END_SRC
*** [[https://github.com/Fanael/rainbow-delimiters][Rainbow-delimiters]]
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    )

#+END_SRC
*** [[https://github.com/Fuco1/smartparens][Smartparens]]
    [[https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95][SmartParens cheatsheet]]
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
      :ensure t
      :config
      (use-package smartparens-config)
      (use-package smartparens-html)
      (use-package smartparens-python)
      (use-package smartparens-latex)
      (smartparens-global-mode t)
      (show-smartparens-global-mode t))
#+END_SRC

*** TODO [[https://github.com/abo-abo/swiper][Counsel, Ivy, and Swiper]]
    Using the config example from Zamansky
 #+BEGIN_SRC emacs-lisp
   (use-package counsel
     :ensure t
     :bind
     (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
      ("M-y" . ivy-next-line)))
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
  (use-package ivy
     :ensure t
     :diminish (ivy-mode)
     :bind (("C-x b" . ivy-switch-buffer))
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "%d/%d ")
     (setq ivy-display-style 'fancy))
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
   (use-package swiper
     :ensure t
     :bind (("C-s" . swiper)
	    ("C-r" . swiper)
	    ("C-c C-r" . ivy-resume)
	    ("M-x" . counsel-M-x)
	    ("C-x C-f" . counsel-find-file))
     :config
     (progn
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
       ))

 #+END_SRC

*** TODO [[https://github.com/jwiegley/alert][Alerts]]
    For getting notifications from Emacs

*** [[https://magit.vc/][Magit]]
    "A Git Porcelain Inside Emacs"
 #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :init
     (progn
     (bind-key "C-x g" 'magit-status)
     ))
 #+END_SRC
*** TODO [[https://github.com/bbatsov/projectile][Projectile]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package projectile
  ;;   :ensure t
  ;;   :bind
  ;;   ("C-c p" . projectile-command-map)
  ;;   :config
  ;;   (projectile-global-mode)
  ;;   (setq projectile-completion-mode 'ivy))
#+END_SRC

#+RESULTS:
: projectile-command-map
*** TODO [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package dashboard
  ;;   :ensure t
  ;;   :config
  ;;   (dashboard-setup-startup-hook)
  ;;   (setq dashboard-center-content nil)
  ;;   (setq dashboard-items '((projects . 5)
  ;; 			  (agenda . 5)))
  ;;   )
#+END_SRC
*** TODO [[https://github.com/jorgenschaefer/elpy][Elpy]]
    Python dev environment for Emacs
    Documentation [[https://elpy.readthedocs.io/en/latest/][here]].
 #+BEGIN_SRC emacs-lisp
   (use-package elpy
     :ensure t
     :config
     (elpy-enable))
 #+END_SRC
*** TODO [[https://github.com/gregsexton/ob-ipython][ob-ipython]]
    Support for ipython in Org-mode
    [[https://vxlabs.com/tag/ob-ipython/][More useful info at VXlabs]]
#+BEGIN_SRC emacs-lisp
  (use-package ob-ipython
    :ensure t
    :config
    (add-hook 'ob-ipython-mode-hookp
	      (lambda ()
		(elpy-mode 0)
		(company-mode 1)))
    (add-to-list 'company-backends 'company-ob-ipython)
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
    )
#+END_SRC

#+RESULTS:
: t

*** TODO [[https://github.com/yuya373/emacs-slack][Slack]]
 #+BEGIN_SRC emacs-lisp
   ;; (use-package slack
   ;;   :commands (slack-start)
   ;;   :init
   ;;   (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
   ;;   (setq slack-prefer-current-team t)
   ;;   :config
   ;;   (slack-register-team
   ;;    :name "MML"
   ;;    :default t
   ;;    :client-id "33430456118.538230002336"
   ;;    :client-secret "8f55e04155dba92bbc25bc5cf9cbb7be"
   ;;    :token "xoxp-33430456118-417790142484-538275360384-0897144b7622bf41fcdccfec2e834a56"
   ;;    :subscribed-channels '(general random g2deep python-chatter enricher)
   ;;    :full-and-display-names t)
   ;;   )

 #+END_SRC
*** [[https://github.com/rnkn/olivetti][Olivetti mode]]
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t
)
 #+END_SRC

 #+RESULTS:
 : Text body width set to 100

*** TODO Theme
***** [[https://github.com/Greduan/emacs-theme-gruvbox][Gruvbox theme]]
Found in [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][this article]]
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox-dark-hard t))

#+END_SRC
***** [[https://github.com/kunalb/poet/blob/master/poet-dark-theme.el][Poet Dark]] with font size modified so it will scale
    #+BEGIN_SRC emacs-lisp
      ;; (set-face-attribute 'default nil :family "DejaVu Serif")
      ;;   (set-face-attribute 'fixed-pitch nil :family "DejaVu Sans Mono")
      ;;   (set-face-attribute 'variable-pitch nil :family "DejaVu Serif")
      ;; (variable-pitch-mode t)
      ;; (use-package poet-theme
      ;;     :ensure t
      ;;     :config
      ;;     (load-theme 'poet-dark t)
      ;;     )
      ;;   ;;(load-theme 'poet-dark t)
#+END_SRC
*** [[https://github.com/Malabarba/smart-mode-line][Smart Mode Line]]
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
    (setq sml/theme 'dark)
    (sml/setup))
#+END_SRC
*** Line wrapping
 #+BEGIN_SRC emacs-lisp
 (use-package adaptive-wrap
 :ensure t
 :init
 (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)
 :config
 (setq-default adaptive-wrap-extra-indent 2)
 )
 (global-visual-line-mode +1)
 #+END_SRC

 
* Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :hook (variable-pitch-mode)
    )
  ;; For some reason thesee do NOT want to be in the use-package declaration
  (setq org-tags-column 0)
  (setq org-hide-leading-stars t)
  (setq org-log-into-drawer t)
  (setq org-startup-with-inline-images "inlineimages")
#+END_SRC

  [[https://orgmode.org/manual/][The Org Manual]]
  [[https://github.com/zzamboni/dot-emacs/blob/master/init.org][Advice on making Org-mode look good for writing]]
*** Fonts and sizes
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces
     'user
     `(org-level-8        ((t (:inherit default :weight bold :foreground "#f5f5f5"))))
     `(org-level-7        ((t (:inherit default :weight bold :foreground "#f5f5f5"))))
     `(org-level-6        ((t (:inherit default :weight bold :foreground "#f5f5f5"))))
     `(org-level-5        ((t (:inherit default :weight bold :foreground "#f5f5f5"))))
     `(org-level-4        ((t (:inherit default :weight bold :height 1.125 :foreground "#f5f5f5"))))
     `(org-level-3        ((t (:inherit default :weight bold :height 1.25 :foreground "#f5f5f5"))))
     `(org-level-2        ((t (:inherit default :weight bold :height 1.375 :foreground "#f5f5f5"))))
     `(org-level-1        ((t (:inherit default :weight bold :height 1.5 :foreground "#f5f5f5"))))
     `(org-document-title ((t (:inherit default :weight bold :height 2.0 :underline t :foreground "#f5f5f5"))))
     '(org-block                 ((t (:inherit fixed-pitch))))
     '(org-document-info         ((t (:inherit fixed-pitch :foreground "dark orange"))))
     '(org-document-info-keyword ((t (:inherit fixed-pitch))))
     '(org-link                  ((t (:foreground "royal blue" :underline t))))
     '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-property-value        ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
     '(org-verbatim              ((t (:inherit (shadow fixed-pitch)))))
     '(org-priority              ((t (:inherit fixed-pitch))))
     '(org-todo                  ((t (:inherit fixed-pitch))))
     '(org-done                  ((t (:inherit fixed-pitch))))
     '(org-table                 ((t (:inherit fixed-pitch))))
     )
#+END_SRC

#+RESULTS:
: 0

[[https://ogbe.net/blog/toggle-serif.html][a mix of variable and fixed pitch fonts]]?
*** [[https://github.com/sabof/org-bullets][Org-bullets]]
 #+BEGIN_SRC emacs-lisp
 (use-package org-bullets
   :ensure t
   :config
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
 (setq org-bullets-bullet-list
         '("◉" "●" "○" "◦" "◦" "◦" "◦"))
 (setq org-odd-levels-only t)
 #+END_SRC

 #+RESULTS:
 : t

*** Agenda settings
    [[http://doc.norang.ca/org-mode.html#CustomAgendaViews][Good examples of custom agenda views]]
 #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files (list "~/Dropbox/DropsyncFiles/Org/todo.org"
				"~/Dropbox/DropsyncFiles/Org/workprojects.org"))
   (global-set-key (kbd "C-c a") 'org-agenda)
 #+END_SRC

 #+RESULTS:
 : org-agenda

 #+BEGIN_SRC emacs-lisp
 (setq org-agenda-custom-commands
       '(("N" "Next 3 days" agenda ""
	  ((org-agenda-span 3)
	   (org-agenda-entry-types '(:timestamp :scheduled)))
	  )))
 #+END_SRC
*** Org-babel
 #+BEGIN_SRC emacs-lisp
   (setq exec-path (append exec-path '("/home/francis/Programs/anaconda3/bin")))

   (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
      (shell . t)
      (emacs-lisp . t)
      (ipython . t)
      (plantuml . t))
    )

   (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
   ;; Use fundamental mode when editing plantuml blocks
   (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
 #+END_SRC

 #+RESULTS:
 : ((plantuml . fundamental) (jupyter-python . python) (ipython . python) (ocaml . tuareg) (elisp . emacs-lisp) (ditaa . artist) (asymptote . asy) (dot . fundamental) (sqlite . sql) (calc . fundamental) (C . c) (cpp . c++) (C++ . c++) (screen . shell-script) (shell . sh) (bash . sh))
